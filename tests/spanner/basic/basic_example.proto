// Copyright 2017, TCN Inc.
// All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:

//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of TCN Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package tests;

option go_package = "github.com/tcncloud/protoc-gen-persist/tests/spanner/basic;basic";
// option (persist.pkg) = "github.com/tcncloud/protoc-gen-persist/tests/spanner/basic;basic";

import "persist/options.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/descriptor.proto";


import "tests/test/test.proto";

enum MyEnum {
    OPTION_0 = 0;
    OPTION_1 = 1;
}

enum MappedEnum {
	OPT_0 = 0;
	OPT_1 = 1;
}

message Something {
	message SomethingElse {
		string thing = 1;
	}
	SomethingElse thing = 2;
	MyEnum myenum = 3;
	MappedEnum mappedenum = 4;
}

message HasTimestamp {
	google.protobuf.Timestamp time = 1;
	Something some = 2;
	string str = 3;
	test.ExampleTable table = 4;
	repeated string strs = 5;
	repeated test.ExampleTable tables = 6;
	repeated Something somes = 7;
	repeated google.protobuf.Timestamp times = 8;
}

service ExtraSrv {
	option (persist.service_type) = SPANNER;

	rpc ExtraUnary(test.NumRows) returns (test.ExampleTable) {
		option (persist.ql) = {
			query: ["SELECT * FROM extra_unary"]
		};
	};
	rpc ExtraMethod(test.ExampleTable) returns (test.ExampleTable);
}

service MySpanner {
  option (persist.service_type) = SPANNER;

  option (persist.mapping) = {
    types: [
      {
        proto_type_name: "google.protobuf.Timestamp"
        proto_type:  TYPE_MESSAGE
      },
      {
        proto_type_name: "tests.MyMappedEnum"
        proto_type: TYPE_ENUM
      }
    ]
  };
  rpc UniaryInsert(test.ExampleTable) returns (test.ExampleTable) {
    option (persist.ql) = {
      query: ["Insert into example_table (id, start_time, name)",
              "Values (@id, @start_time, \"bananas\")"]
      arguments: ["id", "start_time"]
    };
  };
  rpc UniarySelect(test.ExampleTable) returns (test.ExampleTable) {
    option (persist.ql) = {
      query: ["SELECT * from example_table Where id=@id AND name=@name"]
      arguments: ["id", "name"]
    };
  };
  rpc TestNest(Something) returns (Something) {
    option (persist.ql) = {
      query: ["SELECT * from example_table Where id=@thing"]
    };
  };
  rpc TestEverything(HasTimestamp) returns (HasTimestamp) {
    option (persist.ql) = {
      query: ["SELECT * from example_table",
							"Where id=@time AND some=@some AND str=@str AND table=@table",
							"AND times = @times AND somes = @somes AND strs = @strs AND tables = @tables"]
    };
  };

  rpc UniarySelectWithDirectives(test.ExampleTable) returns (test.ExampleTable) {
    option (persist.ql) = {
      query: ["SELECT * from example_table@{FORCE_INDEX=index} Where id=@id AND name=@name"]
      arguments: ["id", "name"]
    };
  };
  rpc UniaryUpdate(test.ExampleTable) returns (test.PartialTable) {
    option (persist.ql) = {
      query: ["Update example_table ",
              "set start_time=@start_time, name=\"oranges\"",
              "PrimaryKey(id=@id)"]
      arguments: ["start_time", "id"],
    };
  };
  rpc UniaryDeleteRange(test.ExampleTableRange) returns (test.ExampleTable) {
    option (persist.ql) = {
      query: ["DELETE FROM example_table START(@start_id) END(@end_id) KIND(CO)"]
      arguments: ["start_id", "end_id"]
    };
  };
  rpc UniaryDeleteSingle(test.ExampleTable) returns (test.ExampleTable) {
    option (persist.ql) = {
      query: ["DELETE FROM example_table VALUES('abc', 123, @id)"]
    };
  };
  rpc NoArgs(test.ExampleTable) returns (test.ExampleTable) {
    option (persist.ql) = {
      query: ["select * from example_table limit 1"]
      arguments: []
    };
  };
  rpc ServerStream(test.Name) returns (stream test.ExampleTable) {
    option (persist.ql) = {
      query: ["SELECT * FROM example_table"]
      arguments: []
    };
  };
  rpc ClientStreamInsert(stream test.ExampleTable) returns (test.NumRows) {
    option (persist.ql) = {
      query: ["INSERT INTO example_table (id, start_time, name) VALUES (@id, @start_time, 3)"]
      arguments: ["id", "start_time", "name"]
    };
  };
  rpc ClientStreamDelete(stream test.ExampleTable) returns (test.NumRows) {
    option (persist.ql) = {
      query: ["DELETE FROM example_table VALUES(@id)"]
      arguments: ["id", "id"],
    };
  };
  rpc ClientStreamUpdate(stream test.ExampleTable) returns (test.NumRows) {
    option (persist.ql) = {
      query: ["update example_table set start_time=@start_time, name=@name PK(id=@id)"]
      arguments: ["start_time", "name", "id"]
    };
  }
  // hook tests
  rpc UniaryInsertWithHooks(test.ExampleTable) returns (test.ExampleTable) {
    option (persist.ql) = {
      query: ["insert into example_table (id, start_time, name)  Values (@id, @start_time, \"bananas\")"]
      arguments: ["id", "start_time"]
      before: true
      after: true
    };
  };
  rpc UniarySelectWithHooks(test.ExampleTable) returns (test.ExampleTable) {
    option (persist.ql) = {
      query: ["SELECT * from example_table Where id=@id"]
      arguments: ["id"]
      before: true
      after: true
    };
  };
  rpc UniaryUpdateWithHooks(test.ExampleTable) returns (test.PartialTable) {
    option (persist.ql) = {
      query: ["Update example_table set start_time=@start_time, name=\"oranges\" PRIMARY_KEY(id=@id)"]
      arguments: ["start_time", "id"]
      before: true
      after: true
    };
  };
  //really ugly, but tests multi-line
  rpc UniaryDeleteWithHooks(test.ExampleTableRange) returns (test.ExampleTable) {
    option (persist.ql) = {
      query: ["DELETE",
      "FROM",
      "example_table",
      "START(@start_id ",
      ") END(@end_id) ",
      "KIND(CO)"]
      arguments: ["start_id", "end_id"]
      before: true
      after: true
    };
  };
  rpc ServerStreamWithHooks(test.Name) returns (stream test.ExampleTable) {
    option (persist.ql) = {
      query: ["SELECT * FROM example_table"]
      arguments: []
      before: true
      after: true
    };
  };
  rpc ClientStreamUpdateWithHooks(stream test.ExampleTable) returns (test.NumRows) {
    option (persist.ql) = {
      query: ["update example_table set name='asdf' pk(id=@id)"]
      arguments: ["start_time", "name", "id"]
      before: true
      after: true
    };
  };
  // rpc TestMultiMappedFields(test.TwoMappedAndEnum) returns (test.TwoMappedAndEnum) {
  //   option (persist.ql) = {
  //     query: ["SELECT * FROM example_table WHERE start_time = ? AND end_time = ? AND gen_enum = ?"]
  //     arguments: ["start_time", "end_time", "gen_enum"]
  //   };
  // };
}
