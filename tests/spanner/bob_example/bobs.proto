// Copyright 2017, TCN Inc.
// All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:

//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of TCN Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package bob;

option go_package="github.com/tcncloud/protoc-gen-persist/tests/spanner/bob_example;bob_example";
option (persist.pkg)="github.com/tcncloud/protoc-gen-persist/tests/spanner/bob_example;bob_example";

import "persist/options.proto";
import "google/protobuf/timestamp.proto";


message Bob {
  int64 id = 1;
  google.protobuf.Timestamp start_time = 2;
  string name = 3;
}
message NumRows {
  int64 count = 1;
}
message Names {
  repeated string names = 1;
}
message Empty { }

// table: bob_table
// pk: id, start_time
// this service is just to test the multiple primary key deletion
service Bobs {
  option (persist.service_type) = SPANNER;

  option (persist.mapping) = {
    types: [
      {
        proto_type_name: ".google.protobuf.Timestamp"
        proto_type:  TYPE_MESSAGE
      }
    ]
  };
  // Delete all bob events before the time in the end key
  rpc DeleteBobs(Bob) returns (Empty) {
    option (persist.ql) = {
      query: ["DELETE FROM bob_table START('Bob') END('Bob', @start_time) KIND(CO)"]
      arguments: []
    };
  };
  rpc PutBobs(stream Bob) returns (NumRows) {
    option (persist.ql) = {
      query: ["INSERT INTO bob_table (id, name, start_time) VALUES (@id, @name, @start_time)"]
      arguments: []
    };
  };
  rpc GetBobs(Empty) returns (stream Bob) {
    option (persist.ql) = {
      query: ["SELECT * from bob_table"]
    };
  };
  rpc GetPeopleFromNames(Names) returns(stream Bob) {
    option (persist.ql) = {
      query: ["SELECT * FROM bob_table WHERE name IN UNNEST(@names)"]
      arguments: []
    };
  };
}
