// Copyright 2017, TCN Inc.
// All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:

//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of TCN Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package tests;

option go_package="github.com/tcncloud/protoc-gen-persist/tests/sql/basic;basic";
// option (persist.pkg)="github.com/tcncloud/protoc-gen-persist/tests/sql/basic;basic";

import "persist/options.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/descriptor.proto";


import "tests/test/test.proto";

service Amazing {
  option (persist.service_type) = SQL;
  option (persist.mapping) = {
    types: [
      {
        proto_type_name: ".google.protobuf.Timestamp"
        proto_type:  TYPE_MESSAGE
      }
    ]
  };

  rpc UniarySelect(test.PartialTable) returns (test.ExampleTable) {
    option (persist.ql) = {
      query: ["SELECT * from example_table Where id=$1 AND start_time>$2"]
      arguments: ["id", "start_time"]
    };
  };
  rpc UniarySelectWithHooks(test.PartialTable) returns (test.ExampleTable) {
    option (persist.ql) = {
      query: ["SELECT * from example_table Where id=$1 AND start_time>$2"]
      arguments: ["id", "start_time"]
      before: true,
      after: true
    };
  };
  rpc ServerStream(test.Name) returns (stream test.ExampleTable) {
    option (persist.ql) = {
      query: ["SELECT * FROM example_table WHERE name=$1"]
      arguments: ["name"]
    };
  };
  rpc ServerStreamWithHooks(test.Name) returns (stream test.ExampleTable) {
    option (persist.ql) = {
      query: ["SELECT * FROM example_table WHERE name=$1"]
      arguments: ["name"]
      before: true,
      after: true
    };
  };
  rpc Bidirectional(stream test.ExampleTable) returns (stream test.ExampleTable) {
    option (persist.ql) = {
      query: ["UPDATE example_table SET (start_time, name) = ($2, $3) WHERE id=$1 RETURNING *"]
      arguments: ["id", "start_time", "name"]
    };
  };
  // Test multi-line query
  rpc BidirectionalWithHooks(stream test.ExampleTable) returns (stream test.ExampleTable) {
    option (persist.ql) = {
      query: [
        "UPDATE example_table",
        "SET (start_time, name) = ($2, $3)",
        "WHERE id=$1 RETURNING",
        "*"
      ]
      arguments: ["id", "start_time", "name"]
      before: true,
      after: true
    };
  };
  rpc ClientStream(stream test.ExampleTable) returns (test.NumRows) {
    option (persist.ql) = {
      query: ["INSERT INTO example_table (id, start_time, name) VALUES ($1, $2, $3)"]
      arguments: ["id", "start_time", "name"]
    };
  };
  rpc ClientStreamWithHook(stream test.ExampleTable) returns (test.Ids) {
    option (persist.ql) = {
      query: ["INSERT INTO example_table (id, start_time, name) VALUES ($1, $2, $3)"]
      arguments: ["id", "start_time", "name"]
      before: true,
      after: true
    };
  };
  rpc UnImplementedPersistMethod(test.ExampleTable) returns (test.ExampleTable) {}
  rpc NoGenerationForBadReturnTypes(test.ExampleTable) returns (BadReturn){}
}
message IntVal {
  int64 val = 1;
}
message BadReturn {
  repeated IntVal no = 1;
}
